name: CI/CD Pipeline

on:
  push:
    branches: ['**']
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '20.x'
  VERCEL_CLI_VERSION: 'latest'

jobs:
  ci:
    name: Continuous Integration
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --no-audit --prefer-offline

      - name: Verify installation
        run: |
          echo "Node.js version: $(node --version)"
          echo "Platform: $(node -p process.platform)"
          echo "Arch: $(node -p process.arch)"
          ls -la node_modules/.bin/ | grep -E "(swc|next)" || true

      - name: Debug jest setup file
        run: |
          echo "Checking for jest.setup files..."
          ls -la jest.setup* || echo "No jest.setup files found"
          pwd
          echo "Contents of working directory:"
          ls -la

      - name: Type checking
        run: npm run type-check

      - name: Linting
        run: npm run lint

      - name: Format check
        run: npx prettier --check .

      - name: Unit tests with coverage
        run: npm test -- --coverage --watchAll=false --maxWorkers=2 --no-cache
        env:
          CI: true
          NODE_ENV: test
          JEST_WORKER_ID: 1

      - name: Build application
        run: npm run build
        env:
          NEXT_TELEMETRY_DISABLED: '1'

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: |
            .next
            public
          retention-days: 1

  version-check:
    name: Version Validation
    runs-on: ubuntu-latest
    needs: ci
    if: |
      (github.event_name == 'pull_request' && github.base_ref == 'refs/heads/main') ||
      (github.event_name == 'push' && github.ref == 'refs/heads/main')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Get current version
        id: package-version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Check if version exists in git tags
        id: version-check
        run: |
          if git rev-parse "v${{ steps.package-version.outputs.current_version }}" >/dev/null 2>&1; then
            echo "Version ${{ steps.package-version.outputs.current_version }} already exists as tag!"
            echo "version_exists=true" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "Version ${{ steps.package-version.outputs.current_version }} is new"
            echo "version_exists=false" >> $GITHUB_OUTPUT
          fi

  cd:
    name: Continuous Deployment to Vercel
    runs-on: ubuntu-latest
    needs: [ci, version-check]
    if: |
      github.event_name == 'push' && 
      github.ref == 'refs/heads/main' &&
      needs.version-check.result == 'success'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: .

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --no-audit --prefer-offline

      - name: Install Vercel CLI
        run: npm install --global vercel@${{ env.VERCEL_CLI_VERSION }}

      - name: Create version tag
        run: |
          VERSION=$(node -p "require('./package.json').version")
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "v$VERSION" -m "Release version $VERSION"
          git push origin "v$VERSION"

      - name: Deploy to Vercel
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "Deploying version $VERSION to Vercel"

          vercel deploy --prod --token ${{ secrets.VERCEL_TOKEN }} \
            --build-env NEXT_PUBLIC_APP_ENV=production \
            --build-env NEXT_PUBLIC_APP_VERSION=$VERSION \
            --confirm \
            --yes
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_PROJECT_NAME: ${{ secrets.VERCEL_PROJECT_NAME }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        if: success()
        with:
          tag_name: v$(node -p "require('./package.json').version")
          name: Release v$(node -p "require('./package.json').version")
          body: |
            Automated deployment to Vercel
            - Version: $(node -p "require('./package.json').version")
            - Commit: ${{ github.sha }}
            - Build: ${{ github.run_id }}
          draft: false
          prerelease: false
